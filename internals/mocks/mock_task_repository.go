// Code generated by MockGen. DO NOT EDIT.
// Source: internals/service/task_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/Schierke/tasks-handler/internals/models"
	repository "github.com/Schierke/tasks-handler/internals/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// FindTaskById mocks base method.
func (m *MockTaskRepository) FindTaskById(ctx context.Context, id string) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTaskById", ctx, id)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTaskById indicates an expected call of FindTaskById.
func (mr *MockTaskRepositoryMockRecorder) FindTaskById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTaskById", reflect.TypeOf((*MockTaskRepository)(nil).FindTaskById), ctx, id)
}

// GetListOfTasks mocks base method.
func (m *MockTaskRepository) GetListOfTasks(ctx context.Context, opts ...func(*repository.Pipeline)) ([]models.TaskResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetListOfTasks", varargs...)
	ret0, _ := ret[0].([]models.TaskResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListOfTasks indicates an expected call of GetListOfTasks.
func (mr *MockTaskRepositoryMockRecorder) GetListOfTasks(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListOfTasks", reflect.TypeOf((*MockTaskRepository)(nil).GetListOfTasks), varargs...)
}

// GetListOfTasksWithOpsMemberName mocks base method.
func (m *MockTaskRepository) GetListOfTasksWithOpsMemberName(ctx context.Context, opts ...func(*repository.Pipeline)) ([]models.TaskResult2, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetListOfTasksWithOpsMemberName", varargs...)
	ret0, _ := ret[0].([]models.TaskResult2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListOfTasksWithOpsMemberName indicates an expected call of GetListOfTasksWithOpsMemberName.
func (mr *MockTaskRepositoryMockRecorder) GetListOfTasksWithOpsMemberName(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListOfTasksWithOpsMemberName", reflect.TypeOf((*MockTaskRepository)(nil).GetListOfTasksWithOpsMemberName), varargs...)
}

// UpdateTaskAssignee mocks base method.
func (m *MockTaskRepository) UpdateTaskAssignee(ctx context.Context, task, assigneeId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskAssignee", ctx, task, assigneeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskAssignee indicates an expected call of UpdateTaskAssignee.
func (mr *MockTaskRepositoryMockRecorder) UpdateTaskAssignee(ctx, task, assigneeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskAssignee", reflect.TypeOf((*MockTaskRepository)(nil).UpdateTaskAssignee), ctx, task, assigneeId)
}
