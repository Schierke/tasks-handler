// Code generated by MockGen. DO NOT EDIT.
// Source: internals/handler/task_handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/Schierke/tasks-handler/internals/models"
	gomock "github.com/golang/mock/gomock"
)

// MockTaskService is a mock of TaskService interface.
type MockTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceMockRecorder
}

// MockTaskServiceMockRecorder is the mock recorder for MockTaskService.
type MockTaskServiceMockRecorder struct {
	mock *MockTaskService
}

// NewMockTaskService creates a new mock instance.
func NewMockTaskService(ctrl *gomock.Controller) *MockTaskService {
	mock := &MockTaskService{ctrl: ctrl}
	mock.recorder = &MockTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskService) EXPECT() *MockTaskServiceMockRecorder {
	return m.recorder
}

// GetTaskLocation mocks base method.
func (m *MockTaskService) GetTaskLocation(ctx context.Context, taskId string) (*models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskLocation", ctx, taskId)
	ret0, _ := ret[0].(*models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskLocation indicates an expected call of GetTaskLocation.
func (mr *MockTaskServiceMockRecorder) GetTaskLocation(ctx, taskId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskLocation", reflect.TypeOf((*MockTaskService)(nil).GetTaskLocation), ctx, taskId)
}

// GetTasks mocks base method.
func (m *MockTaskService) GetTasks(ctx context.Context, status string) ([]models.TaskResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks", ctx, status)
	ret0, _ := ret[0].([]models.TaskResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockTaskServiceMockRecorder) GetTasks(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockTaskService)(nil).GetTasks), ctx, status)
}

// GetTasksWithOps mocks base method.
func (m *MockTaskService) GetTasksWithOps(ctx context.Context) ([]models.TaskResult2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksWithOps", ctx)
	ret0, _ := ret[0].([]models.TaskResult2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksWithOps indicates an expected call of GetTasksWithOps.
func (mr *MockTaskServiceMockRecorder) GetTasksWithOps(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksWithOps", reflect.TypeOf((*MockTaskService)(nil).GetTasksWithOps), ctx)
}

// SetAssignedOpsMember mocks base method.
func (m *MockTaskService) SetAssignedOpsMember(ctx context.Context, taskId, assigneeId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAssignedOpsMember", ctx, taskId, assigneeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAssignedOpsMember indicates an expected call of SetAssignedOpsMember.
func (mr *MockTaskServiceMockRecorder) SetAssignedOpsMember(ctx, taskId, assigneeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAssignedOpsMember", reflect.TypeOf((*MockTaskService)(nil).SetAssignedOpsMember), ctx, taskId, assigneeId)
}
